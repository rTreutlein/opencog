/*
 * Copyright (C) 2017 by OpenCog Foundation
 * All Rights Reserved
 *
 * Author: Andre Senna <https://github.com/andre-senna>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/learning/pattern-index/PatternIndexAPI.h>
#include <opencog/guile/SchemeEval.h>

#include <vector>
#include <cstdio>

using namespace opencog;

class PatternIndexAPIUTest : public CxxTest::TestSuite
{
private:
    // KB file names for querying and mining
    std::string toy_query_fname;
    std::string toy_mining_fname;

    AtomSpace atomSpace;
    SchemeEval *schemeEval;

public:
    PatternIndexAPIUTest();
    ~PatternIndexAPIUTest();

    void setUp();
    void tearDown();

    void test_createAndDelete();
    void test_query();
    void test_mining();
};

PatternIndexAPIUTest::PatternIndexAPIUTest()
{
    SchemeEval::init_scheme();
    SchemeEval::set_scheme_as(&atomSpace);
    schemeEval = new SchemeEval(&atomSpace);

    // Configure Pattern Miner parameters
    config().set("Pattern_Max_Gram", "4");
    config().set("PatternIndex::PatternCountCacheEnabled", "TRUE");
    config().set("PatternIndex::DifferentAssignmentForDifferentVars", "TRUE");
    config().set("PatternIndex::PermutationsOfVarsConsideredEquivalent", "TRUE");
    config().set("PatternIndex::NumberOfEvaluationThreads", "4");
    config().set("PatternIndex::MinimalFrequencyToComputeQualityMetric", "5");
    config().set("PatternIndex::MaximumSizeOfCompoundFramesQueue", "5000000");
    config().set("PatternIndex::PatternsGram", "3");
    config().set("PatternIndex::MaximumNumberOfMiningResults", "10");
    config().set("PatternIndex::PatternRankingMetric", "nisurprisingness");
    config().set("PatternIndex::CoherenceFunction", "const1");
    config().set("PatternIndex::CoherenceModulatorG", "oneOverCoherence");
    config().set("PatternIndex::CoherenceModulatorH", "coherence");

    // KB file names for querying and mining
    std::string pwd(PROJECT_SOURCE_DIR "/tests/learning/pattern-index/");
    toy_query_fname = pwd + "toy-example-query.scm";
    toy_mining_fname = pwd + "toy-example-mining.scm";
}

PatternIndexAPIUTest::~PatternIndexAPIUTest()
{
    delete schemeEval;
}

void PatternIndexAPIUTest::setUp()
{
}

void PatternIndexAPIUTest::tearDown() 
{  
}

void PatternIndexAPIUTest::test_createAndDelete()
{
    Handle key1 = PatternIndexAPI::getInstance().createIndex(toy_query_fname);
    Handle key2 = PatternIndexAPI::getInstance().createIndex(toy_query_fname);
    Handle key3 = PatternIndexAPI::getInstance().createIndex(toy_query_fname);
    TS_ASSERT_EQUALS(key1->get_type(), ANCHOR_NODE);
    TS_ASSERT_EQUALS(key2->get_type(), ANCHOR_NODE);
    TS_ASSERT_EQUALS(key3->get_type(), ANCHOR_NODE);
    PatternIndexAPI::getInstance().deleteIndex(key2);
    TS_ASSERT_THROWS_NOTHING(PatternIndexAPI::getInstance().setProperty(key1, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key2, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_NOTHING(PatternIndexAPI::getInstance().setProperty(key3, "PatternCountCacheEnabled", "true"));
    PatternIndexAPI::getInstance().deleteIndex(key1);
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key1, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key2, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_NOTHING(PatternIndexAPI::getInstance().setProperty(key3, "PatternCountCacheEnabled", "true"));
    PatternIndexAPI::getInstance().deleteIndex(key3);
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key1, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key2, "PatternCountCacheEnabled", "true"));
    TS_ASSERT_THROWS_ANYTHING(PatternIndexAPI::getInstance().setProperty(key3, "PatternCountCacheEnabled", "true"));
}

void PatternIndexAPIUTest::test_query()
{
    Handle indexKey = PatternIndexAPI::getInstance().createIndex(toy_query_fname);
    bool flag1 = false;
    bool flag2 = false;
    bool flag3 = false;
    bool flag4 = false;
    
    std::string queryStr = "(AndLink (SimilarityLink (VariableNode \"X\") (VariableNode \"Y\")) (NotLink (AndLink (InheritanceLink (VariableNode \"X\") (VariableNode \"Z\")) (InheritanceLink (VariableNode \"Y\") (VariableNode \"Z\")))))";
    std::vector<PatternIndexAPI::QueryResult> queryResult;
    patternindex().query(queryResult, indexKey, queryStr);
    TS_ASSERT_EQUALS(queryResult.size(), 4);
    for (const PatternIndexAPI::QueryResult& result : queryResult) {
        TS_ASSERT_EQUALS(result.first.size(), 1);
        Handle link = result.first.at(0);
        TS_ASSERT_EQUALS(link->get_type(), SIMILARITY_LINK);
        HandleSeq outgoing = link->getOutgoingSet();
        TS_ASSERT_EQUALS(outgoing.size(), 2);
        TS_ASSERT_EQUALS(outgoing.at(0)->get_type(), CONCEPT_NODE)
        TS_ASSERT_EQUALS(outgoing.at(1)->get_type(), CONCEPT_NODE)
        if (outgoing.at(0)->get_name().compare("earthworm") == 0) {
            flag1 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("snake") == 0);
        } else if (outgoing.at(0)->get_name().compare("snake") == 0) {
            flag1 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("earthworm") == 0);
        } else if (outgoing.at(0)->get_name().compare("triceratops") == 0) {
            flag2 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("rhino") == 0);
        } else if (outgoing.at(0)->get_name().compare("rhino") == 0) {
            flag2 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("triceratops") == 0);
        } else if (outgoing.at(0)->get_name().compare("vine") == 0) {
            flag3 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("snake") == 0);
        } else if (outgoing.at(0)->get_name().compare("snake") == 0) {
            flag3 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("vine") == 0);
        } else if (outgoing.at(0)->get_name().compare("human") == 0) {
            flag4 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("ent") == 0);
        } else if (outgoing.at(0)->get_name().compare("ent") == 0) {
            flag4 = true;
            TS_ASSERT(outgoing.at(1)->get_name().compare("human") == 0);
        } else {
            TS_FAIL("Wrong query() answer");
        }
    }
    TS_ASSERT(flag1 && flag2 && flag3 && flag4)
}

void PatternIndexAPIUTest::test_mining()
{
    Handle indexKey = patternindex().createIndex(toy_mining_fname);

    patternindex().setProperty(indexKey,
                               "PatternCountCacheEnabled",
                               "false");

    std::vector<PatternIndexAPI::MiningResult> resultPatterns;
    patternindex().minePatterns(resultPatterns, indexKey);

    printf("Top %zu results\n", resultPatterns.size());
    for (const auto& pattern : resultPatterns) {
        printf("%f: %s",
               pattern.first,
               pattern.second->to_string().c_str());
    }

    Handle expected =
        schemeEval->eval_h("(AndLink"
                           "  (InheritanceLink"
                           "    (VariableNode \"V0\")"
                           "    (ConceptNode \"ugly\")"
                           "  )"
                           "  (InheritanceLink"
                           "    (VariableNode \"V0\")"
                           "    (ConceptNode \"soda drinker\")"
                           "  )"
                           "  (InheritanceLink"
                           "    (VariableNode \"V0\")"
                           "    (ConceptNode \"man\")"
                           "  )"
                           ")");

    TS_ASSERT(content_eq(resultPatterns.front().second, expected));
}
